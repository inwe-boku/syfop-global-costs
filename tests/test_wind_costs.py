import pandas as pd
from src.wind_costs import wind_costs


years = [2020, 2025, 2030, 2035, 2040, 2045, 2050]

# Values from appendix of https://doi.org/10.1016/j.energy.2022.124629
# Table S1
capex_class1 = pd.DataFrame(
    {
        260: [1620, 1551, 1482, 1371, 1260, 1217, 1173],
        245: [1568, 1501, 1435, 1327, 1220, 1178, 1135],
        230: [1516, 1452, 1387, 1283, 1179, 1139, 1098],
        215: [1464, 1402, 1340, 1239, 1139, 1100, 1060],
        200: [1413, 1352, 1292, 1196, 1099, 1061, 1023],
        185: [1361, 1303, 1245, 1152, 1058, 1022, 985],
        170: [1309, 1253, 1197, 1108, 1018, 983, 948],
        160: [1274, 1220, 1166, 1079, 991, 957, 923],
        150: [1240, 1187, 1134, 1049, 964, 931, 898],
        140: [1205, 1154, 1103, 1020, 937, 905, 873],
        130: [1171, 1121, 1071, 991, 911, 879, 848],
        120: [1136, 1088, 1039, 962, 884, 853, 823],
        110: [1080, 1034, 988, 914, 840, 811, 782],
        100: [1035, 991, 947, 876, 805, 777, 749],
        90: [989, 947, 905, 837, 769, 743, 716],
    },
    index=years,
)

# Values from appendix of https://doi.org/10.1016/j.energy.2022.124629
# Table S2
capex_class2 = pd.DataFrame(
    {
        260: [1933, 1833, 1733, 1621, 1508, 1459, 1408],
        245: [1860, 1764, 1667, 1560, 1450, 1403, 1354],
        230: [1786, 1694, 1601, 1498, 1393, 1347, 1301],
        215: [1712, 1624, 1535, 1436, 1336, 1292, 1247],
        200: [1639, 1554, 1469, 1374, 1278, 1236, 1193],
        185: [1565, 1484, 1403, 1312, 1221, 1181, 1140],
        170: [1491, 1414, 1337, 1251, 1163, 1125, 1086],
        160: [1442, 1368, 1293, 1210, 1125, 1088, 1050],
        150: [1393, 1321, 1249, 1168, 1087, 1051, 1015],
        140: [1344, 1275, 1205, 1127, 1048, 1014, 979],
        130: [1295, 1228, 1161, 1086, 1010, 977, 943],
        120: [1231, 1167, 1103, 1032, 960, 928, 896],
        110: [1166, 1106, 1045, 978, 909, 880, 849],
        100: [1142, 1082, 1023, 957, 890, 861, 831],
        90: [1142, 1082, 1023, 957, 890, 861, 831],
    },
    index=years,
)

# Values from appendix of https://doi.org/10.1016/j.energy.2022.124629
# Table S3
capex_class3 = pd.DataFrame(
    {
        260: [2107, 2006, 1905, 1791, 1677, 1627, 1575],
        245: [2010, 1913, 1817, 1709, 1599, 1552, 1503],
        230: [1913, 1821, 1729, 1626, 1522, 1477, 1430],
        215: [1816, 1729, 1641, 1544, 1445, 1402, 1358],
        200: [1719, 1636, 1554, 1461, 1368, 1327, 1285],
        185: [1622, 1544, 1466, 1379, 1290, 1252, 1212],
        170: [1524, 1451, 1378, 1296, 1213, 1177, 1140],
        160: [1460, 1390, 1320, 1241, 1162, 1127, 1091],
        150: [1395, 1328, 1261, 1186, 1110, 1077, 1043],
        140: [1330, 1266, 1202, 1131, 1058, 1027, 995],
        130: [1266, 1205, 1144, 1076, 1007, 977, 946],
        120: [1193, 1135, 1078, 1014, 949, 921, 892],
        110: [1193, 1135, 1078, 1014, 949, 921, 892],
        100: [1193, 1135, 1078, 1014, 949, 921, 892],
        90: [1193, 1135, 1078, 1014, 949, 921, 892],
    },
    index=years,
)


def round_away(x):
    """Round away from zero. This is the Python 2 behavior of round(). This type of rounding is
    likely to have been used in the article.
    """
    # copied from here: https://stackoverflow.com/a/21840060/859591
    if round(x + 1) - round(x) != 1:
        return x + abs(x) / x * 0.5
    else:
        return round(x)


def test_compare_wind_costs_to_appendix():
    for wind_class, capex in enumerate((capex_class1, capex_class2, capex_class3), start=1):
        for year, capex_height in capex.iterrows():
            for height, costs_expected in capex_height.items():
                if height == 120:
                    # there seems to be a mistake
                    continue

                costs = wind_costs(wind_class, height, year)
                assert costs_expected == round_away(costs), (
                    "unexpected wind costs for " f"year={year}, height={height}"
                )
